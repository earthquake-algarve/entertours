// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isActive      Boolean?

  role     UserRole  @default(USER)
  accounts Account[]
  sessions Session[]
  company  Company?
  reviews  Review[]

  hasCompany Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  sessionState      String?
  isActive          Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id       String  @id @default(uuid())
  name     String? @map("Name")
  email    String  @unique @map("Email")
  nif      String  @unique @map("NIF")
  phone    String? @map("Phone")
  address  String? @map("Address")
  isActive Boolean
  tours    Tour[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tour {
  id          String  @id @default(uuid())
  name        String
  price       Int
  duration    Int
  description String  @db.Text
  isActive    Boolean

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  reviews Review[]

  images Images[]

  tourAvailability TourAvailability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(uuid())
  name     String
  isActive Boolean
  icon     String?
  imagePath String?

  tours Tour[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id       String  @id @default(uuid())
  name     String
  isActive Boolean

  tours Tour[]

  image Images?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id       String  @id @default(uuid())
  name     String
  isActive Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tour   Tour   @relation(fields: [tourId], references: [id])
  tourId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Images {
  id       String  @id @default(uuid())
  name     String
  isActive Boolean

  tour   Tour?   @relation(fields: [tourId], references: [id])
  tourId String?

  location Location? @relation(fields: [locationId], references: [id])
  locationId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TourAvailability {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  startTime DateTime @db.Time()

  tourId String
  tour Tour @relation(fields: [tourId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}